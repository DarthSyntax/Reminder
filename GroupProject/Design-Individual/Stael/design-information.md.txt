1) The ReminderList class is a list of objects from the Reminder class. It has functions to add and delete. Editing the reminders can be done with the accessor functions in Reminder.

2)This requirement is fulfilled by the Reminders class and it's attributes.

3)This will be implemented by using a hash map/table in the HierList class. The keys will be the type of reminder and the values will be the reminders themselves.

4)The find() method in the HierList class will handle this.
 
5)This isn't considered because it does not affect the design directly.

6)I have a boolean value checkedOff in the Reminder class and a method in the ReminderList class which takes a Reminder object as a parameter to fulfill this need.

7)There is a method in the ReminderList called clearCheckedOff which will remove all elements in the ReminderList that have the attribute checkedOff == true.

8) I have a method in the ReminderList class called check() which will either set the value of the boolean checkedOff in the Reminder class to true or false, depending on what it previously was.

9) There is a method in the ReminderList class that will group the elements by type.

10) I have a class called RemListCollections which will manage handling multiple reminder lists, as well as adding and deleting entire lists.

11) I have a subclass of Reminder called DateTimeReminder with attributes for both the date and time, as well as a boolean variable repeat to indicate that the repeat option has been selected for the alert.

12) There is a subclass of Reminder in my diagram called LocationReminder. It will use another class object, LongLatCoord, to store the location for the reminder. It will also use a method compareLocation(), which will compare the user's current location to the reminder location and if the result is within the threshold the reminder will pop up. The LongLatCoord class has attributes for longitude and latitude of the location.

13) This requirement isn't considered because it does not affect the design directly.